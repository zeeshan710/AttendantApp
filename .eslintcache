[{"D:\\training\\attendant\\src\\index.js":"1","D:\\training\\attendant\\src\\reportWebVitals.js":"2","D:\\training\\attendant\\src\\App.js":"3","D:\\training\\attendant\\src\\pages\\LoginPage.js":"4","D:\\training\\attendant\\src\\components\\LoginForm.js":"5","D:\\training\\attendant\\src\\components\\AdminLoginDialog.js":"6","D:\\training\\attendant\\src\\apiCalls.js":"7","D:\\training\\attendant\\src\\config.js":"8","D:\\training\\attendant\\src\\utils.js":"9","D:\\training\\attendant\\src\\store.js":"10","D:\\training\\attendant\\src\\reducers\\employeeReducer.js":"11","D:\\training\\attendant\\src\\types.js":"12","D:\\training\\attendant\\src\\actions\\employeeActions.js":"13","D:\\training\\attendant\\src\\pages\\FirstLoginPage.js":"14","D:\\training\\attendant\\src\\pages\\EmployeeHomePage.js":"15","D:\\training\\attendant\\src\\components\\Navbar.js":"16","D:\\training\\attendant\\src\\pages\\AdminHomePage.js":"17","D:\\training\\attendant\\src\\components\\UpdateDialog.js":"18","D:\\training\\attendant\\src\\components\\DeleteDialog.js":"19","D:\\training\\attendant\\src\\components\\AddEmployeeDialog.js":"20","D:\\training\\attendant\\src\\components\\MonthsChart.js":"21","D:\\training\\attendant\\src\\components\\EmployeeHistoryDialog.js":"22"},{"size":500,"mtime":499162500000,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"24"},{"size":335,"mtime":1609668658704,"results":"26","hashOfConfig":"24"},{"size":5216,"mtime":1610370868010,"results":"27","hashOfConfig":"24"},{"size":5596,"mtime":1609762010170,"results":"28","hashOfConfig":"24"},{"size":5766,"mtime":1609615145420,"results":"29","hashOfConfig":"24"},{"size":5867,"mtime":1611223371008,"results":"30","hashOfConfig":"24"},{"size":64,"mtime":1609507760227,"results":"31","hashOfConfig":"24"},{"size":1084,"mtime":1610451733307,"results":"32","hashOfConfig":"24"},{"size":286,"mtime":1609611892127,"results":"33","hashOfConfig":"24"},{"size":1106,"mtime":1610438630419,"results":"34","hashOfConfig":"24"},{"size":236,"mtime":1610438286690,"results":"35","hashOfConfig":"24"},{"size":1514,"mtime":1610530122359,"results":"36","hashOfConfig":"24"},{"size":6497,"mtime":1610704264876,"results":"37","hashOfConfig":"24"},{"size":20821,"mtime":1610535541678,"results":"38","hashOfConfig":"24"},{"size":4004,"mtime":1610705742180,"results":"39","hashOfConfig":"24"},{"size":15350,"mtime":1611405101037,"results":"40","hashOfConfig":"24"},{"size":7573,"mtime":1611152333251,"results":"41","hashOfConfig":"24"},{"size":1456,"mtime":1611144123127,"results":"42","hashOfConfig":"24"},{"size":7427,"mtime":1611404891105,"results":"43","hashOfConfig":"24"},{"size":1881,"mtime":1611222608645,"results":"44","hashOfConfig":"24"},{"size":7079,"mtime":1611404833782,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"17wy50k",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"48"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\training\\attendant\\src\\index.js",[],["99","100"],"D:\\training\\attendant\\src\\reportWebVitals.js",[],"D:\\training\\attendant\\src\\App.js",["101"],"import './App.css';\nimport LoginPage from './pages/LoginPage';\nimport FirstLoginPage from './pages/FirstLoginPage';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div >\n        <LoginPage />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","D:\\training\\attendant\\src\\pages\\LoginPage.js",["102"],"import React, { Fragment, useEffect, useState } from 'react';\r\nimport { makeStyles, Typography, Paper, Grid } from '@material-ui/core';\r\nimport titleImage from '../assets/loginpage.png'\r\nimport { LocalHospitalOutlined, ExitToAppOutlined, AssignmentIndOutlined, } from '@material-ui/icons';\r\nimport LoginForm from '../components/LoginForm';\r\nimport FirstLoginPage from './FirstLoginPage';\r\nimport { connect } from 'react-redux';\r\nimport { authenticateAccessToken } from '../utils';\r\nimport { saveEmployeeData } from '../actions/employeeActions';\r\nimport { fetchEmployeeData } from '../apiCalls'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(10),\r\n        backgroundColor: '#ECECEC',\r\n        height: '37.1em'\r\n\r\n    },\r\n    infoArea: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'left',\r\n        backgroundColor: '#353535',\r\n        color: '#ECECEC',\r\n        height: '35em',\r\n        borderTopRightRadius: 0,\r\n        borderBottomRightRadius: 0,\r\n        borderTopLeftRadius: 10,\r\n        borderBottomLeftRadius: 10\r\n    },\r\n    loginFormContainer: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n        height: '35em',\r\n        borderTopLeftRadius: 0,\r\n        borderBottomLeftRadius: 0,\r\n        borderTopRightRadius: 10,\r\n        borderBottomRightRadius: 10,\r\n    },\r\n\r\n    titleArea: {\r\n        marginLeft: '2em',\r\n        marginTop: '7em',\r\n\r\n    },\r\n    title: {\r\n        fontFamily: 'Redressed',\r\n        color: '#ECECEC'\r\n    },\r\n    imageContainer: {\r\n\r\n        display: 'flex',\r\n        justifyContent: 'flex-end'\r\n    },\r\n    image: {\r\n        width: '23em',\r\n        height: '18em',\r\n    },\r\n    iconText: {\r\n        display: 'flex',\r\n        marginLeft: '2em',\r\n        marginTop: '1em'\r\n    },\r\n    text: {\r\n        marginLeft: '0.5em'\r\n    }\r\n\r\n}));\r\n\r\nfunction LoginPage(props) {\r\n    const { accessToken, saveEmployeeData } = props\r\n\r\n    const classes = useStyles();\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const saveEmpData = async () => {\r\n        const token = await authenticateAccessToken();\r\n        const data = await fetchEmployeeData(token);\r\n        let empData = {\r\n            \"token\": token,\r\n            \"employee\": data.response\r\n        }\r\n        saveEmployeeData(empData);\r\n        setLoading(false);\r\n\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        saveEmpData()\r\n\r\n    }, [])\r\n\r\n\r\n    return (\r\n        !loading &&\r\n        <Fragment>\r\n            {accessToken ?\r\n                <FirstLoginPage />\r\n                :\r\n                <div className={classes.root}>\r\n                    <Grid container >\r\n\r\n                        <Grid item xs={8}>\r\n                            <Paper className={classes.infoArea}>\r\n                                <div className={classes.titleArea}>\r\n\r\n                                    <Typography variant=\"h2\" className={classes.title}>\r\n                                        Attendant App\r\n                            </Typography>\r\n\r\n                                </div>\r\n\r\n                                <div style={{\r\n                                    display: 'inline',\r\n                                    float: \"left\"\r\n                                }}>\r\n                                    <div className={classes.iconText} >\r\n                                        <AssignmentIndOutlined />\r\n                                        <Typography className={classes.text} >Monitor Employees CheckIn</Typography>\r\n                                    </div>\r\n\r\n                                    <div className={classes.iconText} >\r\n                                        <ExitToAppOutlined />\r\n                                        <Typography className={classes.text}>Monitor Employees CheckOut</Typography>\r\n                                    </div>\r\n\r\n                                    <div className={classes.iconText} >\r\n                                        <LocalHospitalOutlined />\r\n                                        <Typography className={classes.text}>Monitor Employees Leaves </Typography>\r\n                                    </div>\r\n\r\n                                </div>\r\n\r\n                                <div className={classes.imageContainer} >\r\n                                    <img alt='attendant' src={titleImage} className={classes.image} />\r\n                                </div>\r\n\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                            <Paper className={classes.loginFormContainer}>\r\n                                <LoginForm />\r\n\r\n                            </Paper>\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n\r\n\r\n                </div>\r\n            }\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        accessToken: state.accessToken\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        saveEmployeeData: (data) => dispatch(saveEmployeeData(data)),\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginPage);","D:\\training\\attendant\\src\\components\\LoginForm.js",["103"],"import React, { useState, useCallback } from 'react';\r\nimport { makeStyles, Typography, Grid, TextField, Button, Link, Collapse, IconButton } from '@material-ui/core';\r\nimport { AccountCircle, LockOpen, Close } from '@material-ui/icons';\r\nimport AdminLoginDialog from '../components/AdminLoginDialog';\r\nimport { login } from '../apiCalls'\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport { saveEmployeeData } from '../actions/employeeActions';\r\nimport { connect } from 'react-redux';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    title: {\r\n        fontFamily: 'Redressed',\r\n        color: '#3E3E3E',\r\n        marginTop: '3em'\r\n    },\r\n\r\n    buttonStyle: {\r\n        margin: '2em',\r\n        backgroundColor: 'black'\r\n    },\r\n\r\n    textFieldGrid: {\r\n        marginBottom: '1em'\r\n    }\r\n\r\n}));\r\n\r\nfunction LoginForm(props) {\r\n\r\n    const { saveEmployeeData } = props\r\n\r\n    const classes = useStyles();\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [employeeId, setEmployeeId] = useState('');\r\n    const [pincode, setPincode] = useState('');\r\n    const [employeeIdError, setEmployeeIdError] = useState(true);\r\n    const [pincodeError, setPincodeError] = useState(true);\r\n    const [isError, setIsError] = useState(false);\r\n    const [errorText, setErrorText] = useState('');\r\n\r\n    const handleClickOpen = () => {\r\n        setOpenDialog(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpenDialog(false);\r\n    };\r\n\r\n    const validateEmployeeId = (event) => {\r\n        setEmployeeIdError(false);\r\n        let idPattern = new RegExp(`(([A-Z]{2})-[0-9]{3})`);\r\n        let employeeId = event.target.value.trim();\r\n        let isMatched = idPattern.test(employeeId);\r\n        setEmployeeIdError(isMatched);\r\n        setEmployeeId(employeeId)\r\n    }\r\n\r\n    const validatePincode = (event) => {\r\n        setPincodeError(false);\r\n        let pincodePattern = new RegExp(`([0-9]{4})`);\r\n        let pincode = event.target.value.trim();\r\n        let isMatched = pincodePattern.test(pincode);\r\n        setPincodeError(isMatched)\r\n        setPincode(pincode);\r\n\r\n    }\r\n\r\n    const handleLoginClick = useCallback(async () => {\r\n        if (!employeeId || !pincode || !pincodeError || !employeeIdError) {\r\n            setErrorText('Please fill all the Fields', setIsError(true))\r\n        }\r\n        else {\r\n            const data = await login(employeeId, pincode, \"staff\");\r\n            const { response, error } = data;\r\n            if (error) {\r\n                setErrorText('Invalid Credentials', setIsError(true));\r\n            }\r\n            else {\r\n                saveEmployeeData(response);\r\n                sessionStorage.setItem('accessToken', response.token);\r\n\r\n            }\r\n\r\n        }\r\n    }, [pincode, employeeId]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h4\" className={classes.title}>\r\n                Login\r\n            </Typography>\r\n\r\n            <Grid container spacing={1} alignItems=\"flex-end\" className={classes.textFieldGrid}>\r\n                <Grid item>\r\n                    <AccountCircle />\r\n                </Grid>\r\n                <Grid item xs={10}>\r\n\r\n                    <TextField\r\n                        error={!employeeIdError}\r\n                        helperText={!employeeIdError && \"Invalid Employee Id.\"}\r\n                        id=\"empId\"\r\n                        label=\"Employee ID\"\r\n                        fullWidth\r\n                        onChange={validateEmployeeId}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid container spacing={1} alignItems=\"flex-end\" className={classes.textFieldGrid}>\r\n                <Grid item>\r\n                    <LockOpen />\r\n                </Grid>\r\n                <Grid item xs={10}>\r\n\r\n                    <TextField\r\n                        error={!pincodeError}\r\n                        helperText={!pincodeError && \"Pincode contain only Four digits\"}\r\n                        id=\"pinId\"\r\n                        label=\"Pincode\"\r\n                        type=\"password\"\r\n                        fullWidth\r\n                        onChange={validatePincode}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Collapse in={isError}>\r\n                <Alert\r\n                    severity=\"error\"\r\n                    action={\r\n                        <IconButton\r\n                            aria-label=\"close\"\r\n                            color=\"inherit\"\r\n                            size=\"small\"\r\n                            onClick={() => {\r\n                                setIsError(false);\r\n                            }}\r\n                        >\r\n                            <Close fontSize=\"inherit\" />\r\n                        </IconButton>\r\n                    }\r\n                >\r\n                    {errorText}\r\n                </Alert>\r\n            </Collapse>\r\n\r\n            <Link\r\n                component=\"button\"\r\n                variant=\"body2\"\r\n                onClick={handleClickOpen}\r\n            >\r\n                Login as Admin\r\n            </Link>\r\n\r\n            <Button variant=\"contained\" size=\"medium\" color=\"primary\" className={classes.buttonStyle} onClick={handleLoginClick}>\r\n                Login\r\n            </Button>\r\n\r\n            <AdminLoginDialog open={openDialog} handleClose={handleClose} />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        saveEmployeeData: (data) => dispatch(saveEmployeeData(data))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(LoginForm);","D:\\training\\attendant\\src\\components\\AdminLoginDialog.js",["104"],"import React, { useState, useCallback } from 'react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { makeStyles, Grid, TextField, Button, Collapse, IconButton } from '@material-ui/core';\r\nimport { AccountCircle, LockOpen, Close } from '@material-ui/icons';\r\nimport { login } from '../apiCalls';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport { saveEmployeeData } from '../actions/employeeActions';\r\nimport { connect } from 'react-redux';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    textFieldGrid: {\r\n        marginBottom: '1em'\r\n    }\r\n}))\r\n\r\nfunction AdminLoginDialog(props) {\r\n\r\n    const { open, handleClose, saveEmployeeData } = props\r\n\r\n    const classes = useStyles();\r\n    const [employeeId, setEmployeeId] = useState('');\r\n    const [pincode, setPincode] = useState('');\r\n    const [employeeIdError, setEmployeeIdError] = useState(true);\r\n    const [pincodeError, setPincodeError] = useState(true);\r\n    const [isError, setIsError] = useState(false);\r\n    const [errorText, setErrorText] = useState('');\r\n\r\n\r\n    const validateEmployeeId = (event) => {\r\n        setEmployeeIdError(false);\r\n        let idPattern = new RegExp(`(([A-Z]{2})-[0-9]{3})`);\r\n        let employeeId = event.target.value.trim();\r\n        let isMatched = idPattern.test(employeeId);\r\n        setEmployeeIdError(isMatched);\r\n        isMatched && setEmployeeId(employeeId)\r\n    }\r\n\r\n    const validatePincode = (event) => {\r\n        setPincodeError(false);\r\n        let pincodePattern = new RegExp(`([0-9]{4})`);\r\n        let pincode = event.target.value.trim();\r\n        let isMatched = pincodePattern.test(pincode);\r\n        setPincodeError(isMatched)\r\n        isMatched && setPincode(pincode);\r\n\r\n    }\r\n\r\n    const handleLoginClick = useCallback(async () => {\r\n\r\n        if (!employeeId || !pincode) {\r\n            setErrorText('Please fill all the Fields', setIsError(true))\r\n        }\r\n        else {\r\n            const data = await login(employeeId, pincode, \"admin\");\r\n            const { response, error } = data\r\n            if (error) {\r\n                setErrorText('Invalid Credentials', setIsError(true));\r\n            } else {\r\n                saveEmployeeData(response);\r\n                sessionStorage.setItem('accessToken', response.token);\r\n                handleClose();\r\n            }\r\n\r\n        }\r\n    }, [pincode, employeeId])\r\n\r\n    return (\r\n        <div>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Admin Login</DialogTitle>\r\n                <DialogContent>\r\n\r\n                    <Grid container spacing={1} alignItems=\"flex-end\" className={classes.textFieldGrid}>\r\n                        <Grid item>\r\n                            <AccountCircle />\r\n                        </Grid>\r\n                        <Grid item xs={10}>\r\n                            <TextField\r\n                                error={!employeeIdError}\r\n                                helperText={!employeeIdError && \"Invalid Employee Id.\"}\r\n                                id=\"adminid\"\r\n                                label=\"Employee ID\"\r\n                                fullWidth\r\n                                onChange={validateEmployeeId}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container spacing={1} alignItems=\"flex-end\" className={classes.textFieldGrid}>\r\n                        <Grid item >\r\n                            <LockOpen />\r\n                        </Grid>\r\n                        <Grid item xs={10}>\r\n                            <TextField\r\n                                error={!pincodeError}\r\n                                helperText={!pincodeError && \"Pincode contain only Four digits\"}\r\n                                id=\"adminpincod\"\r\n                                label=\"Pincode\"\r\n                                type=\"password\"\r\n                                fullWidth\r\n                                onChange={validatePincode} />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Collapse in={isError}>\r\n                        <Alert\r\n                            severity=\"error\"\r\n                            action={\r\n                                <IconButton\r\n                                    aria-label=\"close\"\r\n                                    color=\"inherit\"\r\n                                    size=\"small\"\r\n                                    onClick={() => {\r\n                                        setIsError(false);\r\n                                    }}\r\n                                >\r\n                                    <Close fontSize=\"inherit\" />\r\n                                </IconButton>\r\n                            }\r\n                        >\r\n                            {errorText}\r\n                        </Alert>\r\n                    </Collapse>\r\n\r\n                </DialogContent>\r\n\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={handleLoginClick} color=\"primary\">\r\n                        Login\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        saveEmployeeData: (data) => dispatch(saveEmployeeData(data))\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(AdminLoginDialog);","D:\\training\\attendant\\src\\apiCalls.js",[],"D:\\training\\attendant\\src\\config.js",[],"D:\\training\\attendant\\src\\utils.js",[],"D:\\training\\attendant\\src\\store.js",[],"D:\\training\\attendant\\src\\reducers\\employeeReducer.js",[],"D:\\training\\attendant\\src\\types.js",[],"D:\\training\\attendant\\src\\actions\\employeeActions.js",["105","106","107","108"],"import {\r\n    SAVE_AUTHORIZATION_DATA,\r\n    CHANGE_FIRST_LOGIN_STATUS,\r\n    LOGOUT,\r\n    UPDATE_ACTIVITY_STATUS\r\n\r\n} from '../types';\r\nimport { updatePincode, empLogout, punchIn, punchOut } from '../apiCalls'\r\n\r\n\r\nexport const saveEmployeeData = (data) => {\r\n    return {\r\n        type: SAVE_AUTHORIZATION_DATA,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const changeFirstLoginStatus = (pin) => {\r\n    return {\r\n        type: CHANGE_FIRST_LOGIN_STATUS,\r\n        payload: pin\r\n    }\r\n}\r\nexport const changeActivityStatus = (status) => {\r\n    return {\r\n        type: UPDATE_ACTIVITY_STATUS,\r\n        payload: status\r\n    }\r\n}\r\n\r\nexport const updatePin = (pincode) => {\r\n    return async (dispatch, getState) => {\r\n        const state = await getState();\r\n        const { accessToken } = state;\r\n        const response = await updatePincode(pincode, accessToken);\r\n        dispatch(changeFirstLoginStatus(pincode));\r\n\r\n    }\r\n}\r\n\r\nexport const employeeLogout = () => {\r\n    return {\r\n        type: LOGOUT\r\n    }\r\n}\r\n\r\nexport const removeAccessToken = () => {\r\n    return async (dispatch, getState) => {\r\n        const state = await getState();\r\n        const { accessToken } = state;\r\n        const response = await empLogout(accessToken);\r\n        dispatch(employeeLogout);\r\n    }\r\n}\r\n\r\n\r\n\r\n// export const employeePunchin=()=>{\r\n//     return async(dispatch,getState)=>{\r\n//         const state=await getState();\r\n//         const {accessToken}=state;\r\n//         await punchIn(accessToken);\r\n//     }\r\n// }\r\n\r\n\r\n\r\n","D:\\training\\attendant\\src\\pages\\FirstLoginPage.js",["109","110","111"],"import React, { Fragment, useState, useCallback } from 'react';\r\nimport lock from '../assets/safetylock.png';\r\nimport { makeStyles, Paper, Grid, TextField, Button, Link, Collapse, IconButton, Typography } from '@material-ui/core';\r\nimport { LockOpen, Close } from '@material-ui/icons';\r\nimport { connect } from 'react-redux';\r\nimport EmployeeHomePage from './EmployeeHomePage';\r\nimport AdminHomePage from './AdminHomePage';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport { updatePincode } from '../apiCalls';\r\nimport { updatePin } from '../actions/employeeActions'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(10),\r\n        backgroundColor: '#ECECEC',\r\n        height: '37.1em',\r\n\r\n    },\r\n    headerContainer: {\r\n        height: '15em',\r\n        backgroundColor: '#353535',\r\n        borderBottomLeftRadius: 0,\r\n        borderBottomRightRadius: 0,\r\n        borderTopLeftRadius: 15,\r\n        borderTopRightRadius: 15,\r\n        display: 'grid',\r\n        justifyItems: 'center',\r\n        textAlign: 'center'\r\n    },\r\n    formContainer: {\r\n        height: '12em',\r\n        borderBottomLeftRadius: 15,\r\n        borderBottomRightRadius: 15,\r\n        borderTopLeftRadius: 0,\r\n        borderTopRightRadius: 0,\r\n        display: 'grid',\r\n        alignItems: 'center',\r\n\r\n\r\n    },\r\n    image: {\r\n        width: '11em',\r\n        height: '10em',\r\n    },\r\n    title: {\r\n        fontFamily: 'Roboto',\r\n        color: '#ECECEC'\r\n    },\r\n    buttonStyle: {\r\n\r\n        backgroundColor: 'black'\r\n    },\r\n    icon: {\r\n        color: 'gray'\r\n    }\r\n\r\n}));\r\n\r\nfunction FirstLoginPage(props) {\r\n\r\n    const { firstLogin, updatePin, usertype } = props\r\n    const classes = useStyles();\r\n    const [pincode, setPincode] = useState('');\r\n    const [pincodeError, setPincodeError] = useState(true);\r\n    const [errorText, setErrorText] = useState('');\r\n    const [isError, setIsError] = useState(false);\r\n\r\n    const validatePincode = (event) => {\r\n        setPincodeError(false);\r\n        let pincodePattern = new RegExp(`([0-9]{4})`);\r\n        let pincode = event.target.value.toString();\r\n        let isMatched = pincodePattern.test(pincode);\r\n\r\n        if (!isMatched || pincode.toString().length < 5) {\r\n            setPincodeError(isMatched)\r\n        }\r\n        setPincode(pincode);\r\n\r\n    }\r\n\r\n    const handleUpdateClick = useCallback(async () => {\r\n        if (!pincode || !pincodeError) {\r\n            setErrorText('Please fill all the Fields correctly', setIsError(true))\r\n        }\r\n        else {\r\n\r\n            updatePin(pincode);\r\n\r\n        }\r\n    }, [pincode]);\r\n\r\n    return (\r\n        <Fragment>\r\n            {firstLogin ?\r\n                <div className={classes.root}>\r\n                    <Grid container spacing={3} justify='center'>\r\n                        <Grid item lg={4} sm={12}>\r\n                            <Paper className={classes.headerContainer}>\r\n                                <img alt='attendant' src={lock} className={classes.image} />\r\n                                <Typography variant=\"h5\" className={classes.title}>\r\n                                    Update Pincode\r\n                        </Typography>\r\n                                <Typography variant=\"caption\" className={classes.title}>\r\n                                    This is your First Login, Please change your Pincode\r\n                        </Typography>\r\n                            </Paper>\r\n\r\n                            <Paper className={classes.formContainer}>\r\n\r\n                                <Grid container spacing={1} alignItems=\"flex-end\" justify='center' className={classes.textFieldGrid}>\r\n                                    <Grid item>\r\n                                        <LockOpen className={classes.icon} />\r\n                                    </Grid>\r\n                                    <Grid item lg={7}>\r\n                                        <TextField\r\n                                            error={!pincodeError}\r\n                                            helperText={!pincodeError && \"Pincode contain only Four digits\"}\r\n                                            id=\"pin\"\r\n                                            label=\"Pincode\"\r\n                                            fullWidth\r\n                                            onChange={validatePincode}\r\n                                            type=\"password\"\r\n\r\n                                        />\r\n                                    </Grid>\r\n\r\n                                    <Button variant=\"contained\" size=\"medium\" color=\"primary\" className={classes.buttonStyle} onClick={handleUpdateClick} >\r\n                                        Update\r\n                            </Button>\r\n                                </Grid>\r\n                                <Collapse in={isError}>\r\n                                    <Alert\r\n                                        severity=\"error\"\r\n                                        action={\r\n                                            <IconButton\r\n                                                aria-label=\"close\"\r\n                                                color=\"inherit\"\r\n                                                size=\"small\"\r\n                                                onClick={() => {\r\n                                                    setIsError(false);\r\n                                                }}\r\n                                            >\r\n                                                <Close fontSize=\"inherit\" />\r\n                                            </IconButton>\r\n                                        }\r\n                                    >\r\n                                        {errorText}\r\n                                    </Alert>\r\n                                </Collapse>\r\n\r\n                            </Paper>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n                :\r\n                usertype === \"staff\" ? <EmployeeHomePage /> : <AdminHomePage />\r\n            }\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        firstLogin: state.employee.firstLogin,\r\n        usertype: state.employee.usertype\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        updatePin: (data) => dispatch(updatePin(data))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FirstLoginPage);","D:\\training\\attendant\\src\\pages\\EmployeeHomePage.js",["112","113","114"],"import React, { useState, useEffect, useCallback } from 'react';\r\nimport Navbar from '../components/Navbar';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Paper, Grid, Typography, TableCell, TablePagination, Table, TableHead, TableRow, TableBody, TableContainer, Divider, Button, AppBar, Tab, Tabs, Box } from '@material-ui/core';\r\nimport { connect } from 'react-redux';\r\nimport { AlarmOn, AlarmOff, LocalHospitalOutlined, Restaurant, LaptopMac, LocalCafe, Call, NaturePeople, Today, RecentActors } from '@material-ui/icons';\r\nimport dateFormat from 'dateformat';\r\nimport { punchIn, punchOut, getEmployeeDayRecord, updateActivityStatus, getEmployeeAllRecord, onLeave } from '../apiCalls';\r\nimport { changeActivityStatus } from '../actions/employeeActions'\r\nimport { format } from '../utils'\r\n\r\n\r\nconst moment = require('moment');\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        marginTop: '2em',\r\n        marginRight: '1em',\r\n        marginLeft: '1em',\r\n\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        color: theme.palette.text.secondary,\r\n        backgroundColor: '#F8F9F9'\r\n    },\r\n    punchContainer: {\r\n        padding: theme.spacing(2),\r\n        color: theme.palette.text.secondary,\r\n        display: 'flex',\r\n        justifyContent: 'space-evenly',\r\n        backgroundColor: '#F8F9F9',\r\n        marginTop: '1em'\r\n    },\r\n    employeeInfoSubHeadingContainer: {\r\n        display: 'flex',\r\n    },\r\n    employeeInfoSubHeading: {\r\n        color: \"#353535\",\r\n        marginRight: '0.5em'\r\n    },\r\n    divider: {\r\n        marginBottom: '1em'\r\n    },\r\n    punchInButton: {\r\n        backgroundColor: '#7DCEA0',\r\n        '&:hover': {\r\n            backgroundColor: \"#52BE80\",\r\n        },\r\n    },\r\n    punchOutButton: {\r\n        backgroundColor: '#EC7063',\r\n        '&:hover': {\r\n            backgroundColor: \"#E74C3C\",\r\n        },\r\n    },\r\n    onleaveButton: {\r\n        backgroundColor: '#F8C471',\r\n        '&:hover': {\r\n            backgroundColor: \"#F5B041\",\r\n        },\r\n    },\r\n    timer: {\r\n        color: '#353535'\r\n    },\r\n    activityButton: {\r\n        height: '7em',\r\n        width: '7em',\r\n        display: 'grid',\r\n        color: 'gray',\r\n        justifyContent: 'center',\r\n        alignContent: 'center'\r\n    },\r\n    activityButtonIcons: {\r\n        height: '1.5em',\r\n        width: '1.5em',\r\n        justifySelf: 'center',\r\n        marginBottom: '0.5em'\r\n    },\r\n    activityStatus: {\r\n        marginLeft: '1em'\r\n    },\r\n    tabs: {\r\n        flexGrow: 1,\r\n        width: '100%',\r\n        backgroundColor: theme.palette.background.paper,\r\n        marginTop: '1em'\r\n    },\r\n    tableCell: {\r\n        color: 'gray'\r\n    }\r\n\r\n\r\n}));\r\n\r\n\r\nfunction EmployeeHomePage(props) {\r\n\r\n\r\n    const { employeeDetail, accessToken, changeActivityStatus } = props;\r\n    const { firstname, lastname, role, department, employeeid, status: activityStatus } = employeeDetail;\r\n\r\n\r\n\r\n    const [TimerInterval, setTimerInterval] = useState(null);\r\n    const [status, setStatus] = useState(\"Punch-In\");\r\n    const [time, setTime] = useState(0);\r\n    const [value, setValue] = useState(0);\r\n    const [page, setPage] = useState(0);\r\n    const [todayRecordPage, setTodayRecordPage] = useState(0);\r\n    const [todayRecord, setTodayRecord] = useState([])\r\n    const [allRecords, setAllRecords] = useState([]);\r\n    const [disable, setDisable] = useState(false);\r\n    const [loading, setLoading] = useState(true)\r\n\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n\r\n    const classes = useStyles();\r\n    const todayDate = dateFormat(Date.now(), \"dddd, mmmm dS, yyyy\");\r\n\r\n    const Timer = async () => {\r\n        const response = await punchIn(accessToken);\r\n        console.log(\"PUNCHIN,\", response.status)\r\n        setStatus(\"Punch-Out\");\r\n        setTimerInterval(setInterval(() => {\r\n            setTime(time => time + 1);\r\n\r\n        }, 1000));\r\n        handleActivityStatus('Active');\r\n\r\n    }\r\n\r\n    const pauseTimer = async () => {\r\n        const response = await punchOut(time, accessToken);\r\n        console.log(\"PUNCHOUT,\", response.status)\r\n        setStatus(\"Punch-In\");\r\n        clearInterval(TimerInterval);\r\n        handleActivityStatus('In-Active');\r\n        fetchDayRecord();\r\n        fetchAllRecord();\r\n    }\r\n\r\n\r\n    const handlePunchIn_Punchout = () => {\r\n\r\n        status === \"Punch-In\" ? Timer() : pauseTimer();\r\n    }\r\n\r\n    const handleOnLeave = async () => {\r\n        setDisable(true)\r\n        const response = await onLeave(accessToken);\r\n\r\n        if (response.status === 200) {\r\n            setDisable(true)\r\n            handleActivityStatus('On-leave')\r\n        }\r\n        else setDisable(false)\r\n    }\r\n\r\n    const handleActivityStatus = async (status) => {\r\n        const data = await updateActivityStatus(status, accessToken);\r\n        data.status === 200 && changeActivityStatus(status);\r\n    }\r\n\r\n    const fetchAllRecord = async () => {\r\n        const data = await getEmployeeAllRecord(accessToken);\r\n\r\n        let allRecord = []\r\n\r\n        if (!data.error) {\r\n\r\n            await data.response.map((record) => {\r\n\r\n                let workingHourFormatted = format(record.totalworkinghours[record.totalworkinghours.length - 1]);\r\n                let date = record.date\r\n                let item = {\r\n                    \"date\": date,\r\n                    \"totalworkinghours\": workingHourFormatted\r\n                }\r\n                allRecord.push(item)\r\n\r\n            })\r\n            setAllRecords(allRecord);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const fetchDayRecord = async () => {\r\n        const data = await getEmployeeDayRecord(accessToken);\r\n        console.log(\"TODAY RECORD\", data);\r\n\r\n        if (!data.error) {\r\n\r\n            const { response } = data;\r\n            const { totalworkinghours, punchin, punchout, onleave } = response\r\n            const timeIndex = totalworkinghours.length\r\n            timeIndex > 0 && setTime(totalworkinghours[timeIndex - 1])\r\n\r\n            if (onleave) {\r\n                setDisable(true)\r\n                handleActivityStatus('On-leave');\r\n            }\r\n\r\n            let record = [];\r\n\r\n            for (let i = 0; i < timeIndex; i++) {\r\n\r\n                let punchinTime = new Date(punchin[i]);\r\n                let punchinTimeformatted = moment(punchinTime, \"HH:mm\").format(\"hh:mm:ss A\")\r\n\r\n                let punchoutTime = new Date(punchout[i]);\r\n                let punchoutTimeformatted = moment(punchoutTime, \"HH:mm\").format(\"hh:mm:ss A\")\r\n\r\n                let workingHourFormatted = format(totalworkinghours[i])\r\n\r\n                let item = {\r\n                    \"punchin\": punchinTimeformatted,\r\n                    \"punchout\": punchoutTimeformatted,\r\n                    \"totalworkinghours\": workingHourFormatted\r\n                }\r\n\r\n                record.push(item)\r\n            }\r\n            setTodayRecord(record);\r\n            console.log(record);\r\n            setLoading(false)\r\n        }\r\n        setLoading(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchDayRecord();\r\n        fetchAllRecord();\r\n    }, [])\r\n\r\n\r\n    function TabPanel(props) {\r\n        const { children, value, index, ...other } = props;\r\n\r\n        return (\r\n            <div\r\n                role=\"tabpanel\"\r\n                hidden={value !== index}\r\n                id={`scrollable-force-tabpanel-${index}`}\r\n                aria-labelledby={`scrollable-force-tab-${index}`}\r\n                {...other}\r\n            >\r\n                {value === index && (\r\n                    <Box p={3}>\r\n                        <Typography>{children}</Typography>\r\n                    </Box>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const renderDayRecordTab = () => {\r\n        return (\r\n            <div className={classes.tabs}>\r\n                <AppBar position=\"static\" color=\"default\">\r\n                    <Tabs\r\n                        value={value}\r\n                        onChange={handleChange}\r\n\r\n                        scrollButtons=\"on\"\r\n                        indicatorColor=\"primary\"\r\n                        textColor=\"primary\"\r\n                        centered={true}\r\n                    >\r\n                        <Tab label=\"today\" icon={<Today />} />\r\n                        <Tab label=\"All Records\" icon={<RecentActors />} />\r\n\r\n                    </Tabs>\r\n                </AppBar>\r\n                <TabPanel value={value} index={0}>\r\n                    {todayRecord.length > 0 ? renderTodayRecordTable() : null}\r\n                </TabPanel>\r\n                <TabPanel value={value} index={1}>\r\n                    {allRecords.length > 0 ? renderAllRecordTable() : null}\r\n                </TabPanel>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const renderActivityButtons = () => {\r\n        return (\r\n            <Paper className={classes.punchContainer}>\r\n\r\n\r\n                <Button variant=\"outlined\" className={classes.activityButton} onClick={() => handleActivityStatus('Lunch')} disabled={disable}>\r\n                    <Restaurant className={classes.activityButtonIcons} />\r\n                    <Typography align='center' variant=\"subtitle2\">\r\n                        Lunch\r\n                                </Typography>\r\n                </Button>\r\n\r\n                <Button variant=\"outlined\" className={classes.activityButton} onClick={() => handleActivityStatus('Meeting')} disabled={disable}>\r\n                    <LaptopMac className={classes.activityButtonIcons} />\r\n                    <Typography align='center' variant=\"subtitle2\">\r\n                        Meeting\r\n                                </Typography>\r\n                </Button>\r\n\r\n                <Button variant=\"outlined\" className={classes.activityButton} onClick={() => handleActivityStatus('Coffee')} disabled={disable}>\r\n                    <LocalCafe className={classes.activityButtonIcons} />\r\n                    <Typography align='center' variant=\"subtitle2\">\r\n                        Coffee\r\n                                </Typography>\r\n                </Button>\r\n\r\n                <Button variant=\"outlined\" className={classes.activityButton} onClick={() => handleActivityStatus('Call')} disabled={disable}>\r\n                    <Call className={classes.activityButtonIcons} />\r\n                    <Typography align='center' variant=\"subtitle2\">\r\n                        Call\r\n                                </Typography>\r\n                </Button>\r\n\r\n                <Button variant=\"outlined\" className={classes.activityButton} onClick={() => handleActivityStatus('Break')} disabled={disable}>\r\n                    <NaturePeople className={classes.activityButtonIcons} />\r\n                    <Typography align='center' variant=\"subtitle2\">\r\n                        Break\r\n                                </Typography>\r\n                </Button>\r\n\r\n            </Paper>\r\n        )\r\n    }\r\n    const handleTodayRecordChangePage = (event, newPage) => {\r\n\r\n        setTodayRecordPage(newPage);\r\n    };\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const renderTodayRecordTable = useCallback(() => {\r\n        return (\r\n            <Paper >\r\n                <TableContainer >\r\n                    <Table stickyHeader aria-label=\"sticky table\">\r\n                        <TableHead className=\"table-header\">\r\n                            <TableRow >\r\n                                <TableCell align=\"center\">PunchIn</TableCell>\r\n                                <TableCell align=\"center\">PunchOut</TableCell>\r\n                                <TableCell align=\"center\">Working Hours</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody className={classes.tableCell}>\r\n                            {todayRecord.slice(todayRecordPage * 4, todayRecordPage * 4 + 4)\r\n\r\n                                .map((row) => (\r\n                                    <TableRow key={row.name}>\r\n                                        <TableCell component=\"th\" scope=\"row\" align=\"center\">\r\n\r\n                                            {row.punchin}\r\n\r\n\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            {row.punchout}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            {row.totalworkinghours}\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={false}\r\n                    component=\"div\"\r\n                    count={todayRecord.length}\r\n                    rowsPerPage={4}\r\n                    page={todayRecordPage}\r\n                    onChangePage={handleTodayRecordChangePage}\r\n                />\r\n            </Paper>\r\n        );\r\n    }, [todayRecord, todayRecordPage])\r\n\r\n\r\n    const renderAllRecordTable = useCallback(() => {\r\n        return (\r\n            <Paper >\r\n                <TableContainer >\r\n                    <Table stickyHeader aria-label=\"sticky table\">\r\n                        <TableHead className=\"table-header\">\r\n                            <TableRow >\r\n                                <TableCell align=\"center\">Date</TableCell>\r\n                                <TableCell align=\"center\">Working Hours</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {allRecords.slice(page * 4, page * 4 + 4)\r\n                                .map((row) => (\r\n                                    <TableRow key={row.name}>\r\n                                        <TableCell component=\"th\" scope=\"row\" align=\"center\">\r\n                                            {row.date}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            {row.totalworkinghours}\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={false}\r\n                    component=\"div\"\r\n                    count={allRecords.length}\r\n                    rowsPerPage={4}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                />\r\n            </Paper>\r\n        );\r\n    }, [allRecords, page])\r\n\r\n\r\n    return (\r\n        <div >\r\n            <Navbar />\r\n            {loading ? null :\r\n                <div className={classes.root}>\r\n                    <Grid container spacing={3}>\r\n\r\n                        <Grid item xs={6}>\r\n                            <Grid item xs={12}>\r\n                                <Paper className={classes.paper}>\r\n\r\n                                    <Typography variant=\"h5\" gutterBottom display=\"inline\" >\r\n                                        {`${firstname} ${lastname}`}\r\n                                    </Typography>\r\n\r\n                                    <Typography variant=\"overline\" gutterBottom align=\"right\" className={classes.activityStatus}>\r\n                                        {activityStatus}\r\n                                    </Typography>\r\n\r\n\r\n\r\n                                    <Divider className={classes.divider} />\r\n\r\n                                    <div className={classes.employeeInfoSubHeadingContainer}>\r\n                                        <Typography variant=\"subtitle2\" gutterBottom className={classes.employeeInfoSubHeading}>\r\n                                            {`Employee Id :`}\r\n                                        </Typography>\r\n                                        <Typography variant=\"subtitle2\" gutterBottom>\r\n                                            {`${employeeid} `}\r\n                                        </Typography>\r\n                                    </div>\r\n\r\n                                    <div className={classes.employeeInfoSubHeadingContainer}>\r\n                                        <Typography variant=\"subtitle2\" gutterBottom className={classes.employeeInfoSubHeading}>\r\n                                            {`Role :`}\r\n                                        </Typography>\r\n                                        <Typography variant=\"subtitle2\" gutterBottom>\r\n                                            {`${role} `}\r\n                                        </Typography>\r\n                                    </div>\r\n\r\n                                    <div className={classes.employeeInfoSubHeadingContainer}>\r\n                                        <Typography variant=\"subtitle2\" gutterBottom className={classes.employeeInfoSubHeading}>\r\n                                            {`Department :`}\r\n                                        </Typography>\r\n                                        <Typography variant=\"subtitle2\" gutterBottom>\r\n                                            {`${department} `}\r\n                                        </Typography>\r\n                                    </div>\r\n\r\n                                </Paper>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Paper className={classes.paper}>\r\n                                <Typography variant=\"subtitle2\" gutterBottom>\r\n                                    {todayDate}\r\n                                </Typography>\r\n\r\n                                <Typography align='center' variant=\"h3\" gutterBottom className={classes.timer} >\r\n                                    {`${Math.floor(time / 3600).toString().padStart(2, \"0\")}:${Math.floor((time / 60) % 60).toString().padStart(2, \"0\")}:${Math.floor(time % 60).toString().padStart(2, \"0\")}`}\r\n                                </Typography>\r\n\r\n                                <Typography align='center' variant=\"h5\">\r\n                                    Total Working Hours\r\n                            </Typography>\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item xs={6} >\r\n                            <Paper className={classes.punchContainer}>\r\n\r\n                                <Button\r\n                                    size=\"large\"\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    className={status === \"Punch-In\" ? classes.punchInButton : classes.punchOutButton}\r\n                                    startIcon={status === \"Punch-In\" ? <AlarmOn /> : <AlarmOff />}\r\n                                    onClick={handlePunchIn_Punchout}\r\n                                    disabled={disable}\r\n                                >\r\n                                    {status}\r\n                                </Button>\r\n\r\n                                <Button\r\n                                    size=\"large\"\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.onleaveButton}\r\n                                    startIcon={<LocalHospitalOutlined />}\r\n                                    onClick={handleOnLeave}\r\n                                    disabled={disable}\r\n                                >\r\n                                    On-Leave\r\n                            </Button>\r\n                            </Paper>\r\n\r\n                            <Grid item xs={12} >\r\n                                {renderActivityButtons()}\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={6} >\r\n\r\n\r\n                            {renderDayRecordTab()}\r\n\r\n                        </Grid>\r\n\r\n\r\n\r\n                    </Grid>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        employeeDetail: state.employee,\r\n        accessToken: state.accessToken,\r\n        status: state.status\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeActivityStatus: (val) => dispatch(changeActivityStatus(val))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EmployeeHomePage);","D:\\training\\attendant\\src\\components\\Navbar.js",[],"D:\\training\\attendant\\src\\pages\\AdminHomePage.js",["115","116","117"],"D:\\training\\attendant\\src\\components\\UpdateDialog.js",["118","119","120","121"],"D:\\training\\attendant\\src\\components\\DeleteDialog.js",[],"D:\\training\\attendant\\src\\components\\AddEmployeeDialog.js",["122","123","124","125"],"import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Grid, Dialog, DialogTitle, DialogContent, DialogContentText, TextField, DialogActions, FormControl, InputLabel, Select, Button, Popper, Fade, Typography, Divider } from '@material-ui/core';\r\nimport { addEmployee } from '../apiCalls';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    Fields: {\r\n        width: '100%',\r\n\r\n    },\r\n    statusField: {\r\n        width: '100%',\r\n        marginTop: '0.5em'\r\n    }\r\n}))\r\n\r\n\r\nfunction AddEmployeeDialog(props) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const { open, handleClose, record, updateRecord } = props;\r\n\r\n    const [employeeid, setEmployeeid] = useState('')\r\n    const [firstname, setFirstname] = useState('');\r\n    const [lastname, setLastname] = useState('');\r\n    const [department, setDepartment] = useState('');\r\n    const [role, setRole] = useState('');\r\n    const [alert, setAlert] = useState(false);\r\n\r\n\r\n\r\n    const close = () => {\r\n        handleClose();\r\n        setAlert(false)\r\n    }\r\n    const handleFirstNameChange = (event) => { setFirstname(event.target.value) };\r\n\r\n    const handleLastNameChange = (event) => { setLastname(event.target.value) };\r\n\r\n    const handleDepartmentChange = async (event) => {\r\n        setDepartment(event.target.value)\r\n        let id = await employeeId(event.target.value);\r\n        setEmployeeid(id);\r\n\r\n    };\r\n\r\n    const handleRoleChange = (event) => { setRole(event.target.value) };\r\n\r\n    const employeeId = async (name) => {\r\n        const count = await record.filter((record) => { return record.department === name }).length + 1;\r\n        switch (name) {\r\n            case \"Human Resource\": return `HR-${count.toString().padStart(3, \"0\")}`\r\n            case \"Software Engineering\": return `SE-${count.toString().padStart(3, \"0\")}`\r\n            default: return ''\r\n        }\r\n    }\r\n\r\n    const handleAddClick = async () => {\r\n\r\n        if (!employeeid || !firstname.trim() || !lastname.trim() || !department || !role) {\r\n            setAlert(true)\r\n        }\r\n        else {\r\n            const data = await addEmployee(employeeid, firstname, lastname, role, department);\r\n            console.log(\"ADD\", data);\r\n            setEmployeeid('');\r\n            setFirstname('');\r\n            setLastname('');\r\n            setDepartment('');\r\n            setRole('');\r\n            close();\r\n            updateRecord();\r\n            setAlert(false)\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <Dialog open={open} onClose={close} aria-labelledby=\"form-dialog-title\" maxWidth='sm' fullWidth>\r\n                <DialogTitle id=\"form-dialog-title\">ADD</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Employee Information\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"empid\"\r\n\r\n                        fullWidth\r\n                        variant='outlined'\r\n                        disabled={true}\r\n                        value={employeeid}\r\n                    />\r\n\r\n                    <Grid container spacing={1} >\r\n                        <Grid item xs={6}>\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"firstname\"\r\n                                label=\"First Name\"\r\n                                fullWidth\r\n                                variant='outlined'\r\n                                value={firstname}\r\n                                onChange={handleFirstNameChange}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <TextField\r\n\r\n                                margin=\"dense\"\r\n                                id=\"lastname\"\r\n                                label=\"Last Name\"\r\n                                fullWidth\r\n                                variant='outlined'\r\n                                value={lastname}\r\n                                onChange={handleLastNameChange}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container spacing={1} >\r\n                        <Grid item xs={6}>\r\n                            <FormControl variant=\"outlined\" className={classes.Fields}>\r\n                                <InputLabel htmlFor=\"departmentOptions\">Department</InputLabel>\r\n                                <Select\r\n                                    native\r\n                                    value={department}\r\n                                    onChange={handleDepartmentChange}\r\n                                    label=\"depatment\"\r\n                                    inputProps={{\r\n                                        name: \"department\",\r\n                                        id: \"departmentOptions\"\r\n                                    }}\r\n                                >\r\n                                    <option value={''}></option>\r\n                                    <option value={'Software Engineering'}>Software Engineering</option>\r\n                                    <option value={'Human Resource'}>Human Resource</option>\r\n\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={6}>\r\n                            <FormControl variant=\"outlined\" className={classes.Fields}>\r\n                                <InputLabel htmlFor=\"roleOptions\">Role</InputLabel>\r\n                                <Select\r\n                                    native\r\n                                    value={role}\r\n                                    onChange={handleRoleChange}\r\n                                    label=\"Role\"\r\n                                    inputProps={{\r\n                                        name: \"Role\",\r\n                                        id: \"roleOptions\"\r\n                                    }}\r\n                                >\r\n                                    <option value={''}></option>\r\n                                    <option value={'Software Engineer'}>Software Engineer</option>\r\n                                    <option value={'Product Manager'}>Product Manager</option>\r\n                                    <option value={'SQA'}>SQA</option>\r\n                                    <option value={'HR Manager'}>HR Manager</option>\r\n\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n\r\n                    {alert && <Alert severity=\"error\">Please Fill All The Fields</Alert>}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={close} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        onClick={handleAddClick}\r\n                        color=\"primary\">\r\n                        Add\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddEmployeeDialog;","D:\\training\\attendant\\src\\components\\MonthsChart.js",["126"],"D:\\training\\attendant\\src\\components\\EmployeeHistoryDialog.js",["127","128","129"],{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":3,"column":8,"nodeType":"136","messageId":"137","endLine":3,"endColumn":22},{"ruleId":"138","severity":1,"message":"139","line":94,"column":8,"nodeType":"140","endLine":94,"endColumn":10,"suggestions":"141"},{"ruleId":"138","severity":1,"message":"142","line":86,"column":8,"nodeType":"140","endLine":86,"endColumn":29,"suggestions":"143"},{"ruleId":"138","severity":1,"message":"144","line":69,"column":8,"nodeType":"140","endLine":69,"endColumn":29,"suggestions":"145"},{"ruleId":"134","severity":1,"message":"146","line":8,"column":36,"nodeType":"136","messageId":"137","endLine":8,"endColumn":43},{"ruleId":"134","severity":1,"message":"147","line":8,"column":45,"nodeType":"136","messageId":"137","endLine":8,"endColumn":53},{"ruleId":"134","severity":1,"message":"148","line":35,"column":15,"nodeType":"136","messageId":"137","endLine":35,"endColumn":23},{"ruleId":"134","severity":1,"message":"148","line":51,"column":15,"nodeType":"136","messageId":"137","endLine":51,"endColumn":23},{"ruleId":"134","severity":1,"message":"149","line":3,"column":54,"nodeType":"136","messageId":"137","endLine":3,"endColumn":58},{"ruleId":"134","severity":1,"message":"150","line":9,"column":10,"nodeType":"136","messageId":"137","endLine":9,"endColumn":23},{"ruleId":"138","severity":1,"message":"151","line":91,"column":8,"nodeType":"140","endLine":91,"endColumn":17,"suggestions":"152"},{"ruleId":"153","severity":1,"message":"154","line":177,"column":46,"nodeType":"155","messageId":"156","endLine":177,"endColumn":48},{"ruleId":"138","severity":1,"message":"157","line":240,"column":8,"nodeType":"140","endLine":240,"endColumn":10,"suggestions":"158"},{"ruleId":"138","severity":1,"message":"159","line":387,"column":8,"nodeType":"140","endLine":387,"endColumn":38,"suggestions":"160"},{"ruleId":"134","severity":1,"message":"161","line":4,"column":163,"nodeType":"136","messageId":"137","endLine":4,"endColumn":169},{"ruleId":"134","severity":1,"message":"162","line":4,"column":171,"nodeType":"136","messageId":"137","endLine":4,"endColumn":175},{"ruleId":"153","severity":1,"message":"154","line":161,"column":46,"nodeType":"155","messageId":"156","endLine":161,"endColumn":48},{"ruleId":"134","severity":1,"message":"161","line":3,"column":138,"nodeType":"136","messageId":"137","endLine":3,"endColumn":144},{"ruleId":"134","severity":1,"message":"162","line":3,"column":146,"nodeType":"136","messageId":"137","endLine":3,"endColumn":150},{"ruleId":"134","severity":1,"message":"163","line":3,"column":152,"nodeType":"136","messageId":"137","endLine":3,"endColumn":162},{"ruleId":"134","severity":1,"message":"164","line":3,"column":164,"nodeType":"136","messageId":"137","endLine":3,"endColumn":171},{"ruleId":"134","severity":1,"message":"161","line":3,"column":138,"nodeType":"136","messageId":"137","endLine":3,"endColumn":144},{"ruleId":"134","severity":1,"message":"162","line":3,"column":146,"nodeType":"136","messageId":"137","endLine":3,"endColumn":150},{"ruleId":"134","severity":1,"message":"163","line":3,"column":152,"nodeType":"136","messageId":"137","endLine":3,"endColumn":162},{"ruleId":"134","severity":1,"message":"164","line":3,"column":164,"nodeType":"136","messageId":"137","endLine":3,"endColumn":171},{"ruleId":"153","severity":1,"message":"154","line":57,"column":35,"nodeType":"155","messageId":"156","endLine":57,"endColumn":37},{"ruleId":"134","severity":1,"message":"165","line":3,"column":10,"nodeType":"136","messageId":"137","endLine":3,"endColumn":16},{"ruleId":"153","severity":1,"message":"154","line":119,"column":35,"nodeType":"155","messageId":"156","endLine":119,"endColumn":37},{"ruleId":"138","severity":1,"message":"166","line":139,"column":8,"nodeType":"140","endLine":139,"endColumn":20,"suggestions":"167"},"no-native-reassign",["168"],"no-negated-in-lhs",["169"],"no-unused-vars","'FirstLoginPage' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'saveEmpData'. Either include it or remove the dependency array.","ArrayExpression",["170"],"React Hook useCallback has missing dependencies: 'employeeIdError', 'pincodeError', and 'saveEmployeeData'. Either include them or remove the dependency array.",["171"],"React Hook useCallback has missing dependencies: 'handleClose' and 'saveEmployeeData'. Either include them or remove the dependency array.",["172"],"'punchIn' is defined but never used.","'punchOut' is defined but never used.","'response' is assigned a value but never used.","'Link' is defined but never used.","'updatePincode' is defined but never used.","React Hook useCallback has missing dependencies: 'pincodeError' and 'updatePin'. Either include them or remove the dependency array.",["173"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'fetchAllRecord' and 'fetchDayRecord'. Either include them or remove the dependency array.",["174"],"React Hook useCallback has a missing dependency: 'classes.tableCell'. Either include it or remove the dependency array.",["175"],"'Popper' is defined but never used.","'Fade' is defined but never used.","'Typography' is defined but never used.","'Divider' is defined but never used.","'Button' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchEmployeeHistory'. Either include it or remove the dependency array.",["176"],"no-global-assign","no-unsafe-negation",{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},{"desc":"181","fix":"182"},{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},"Update the dependencies array to be: [saveEmpData]",{"range":"191","text":"192"},"Update the dependencies array to be: [employeeId, pincode, pincodeError, employeeIdError, saveEmployeeData]",{"range":"193","text":"194"},"Update the dependencies array to be: [employeeId, pincode, saveEmployeeData, handleClose]",{"range":"195","text":"196"},"Update the dependencies array to be: [pincode, pincodeError, updatePin]",{"range":"197","text":"198"},"Update the dependencies array to be: [fetchAllRecord, fetchDayRecord]",{"range":"199","text":"200"},"Update the dependencies array to be: [classes.tableCell, todayRecord, todayRecordPage]",{"range":"201","text":"202"},"Update the dependencies array to be: [employeeId, fetchEmployeeHistory]",{"range":"203","text":"204"},[2474,2476],"[saveEmpData]",[2742,2763],"[employeeId, pincode, pincodeError, employeeIdError, saveEmployeeData]",[2515,2536],"[employeeId, pincode, saveEmployeeData, handleClose]",[2614,2623],"[pincode, pincodeError, updatePin]",[7111,7113],"[fetchAllRecord, fetchDayRecord]",[13153,13183],"[classes.tableCell, todayRecord, todayRecordPage]",[3547,3559],"[employeeId, fetchEmployeeHistory]"]